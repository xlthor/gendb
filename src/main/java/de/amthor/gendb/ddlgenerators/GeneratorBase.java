package de.amthor.gendb.ddlgenerators;

import java.util.Date;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;

import de.amthor.gendb.entity.Release;
import de.amthor.gendb.exception.ResourceNotFoundException;
import de.amthor.gendb.payload.DatabaseDto;
import de.amthor.gendb.payload.ProjectDto;
import de.amthor.gendb.service.ProjectService;
import de.amthor.gendb.service.ReleaseService;
import de.amthor.gendb.utils.CodeBuffer;

public class GeneratorBase {

	public static final Logger LOGGER = LoggerFactory.getLogger(GeneratorBase.class);
	
	@Autowired
	ReleaseService releaseService;
	
	@Autowired
	ProjectService projectService;
	
	public enum Scope  {
		RELEASE ("Relase"),
		DATABASE ("Database"),
		TABLE ("Table");
		
		public final String scope;
		
		private Scope(String scope) {
			this.scope = scope;
		}
		
		@Override 
		public String toString() { 
		    return this.scope; 
		}
	}
	
	public Scope scope = Scope.DATABASE;
	
	public String dbType = null;
	
	GeneratorBase() {
		LOGGER.info("=====================> welcome to code generator " + this.getClass().getSimpleName());
	}
	
	public void codeHeader(CodeBuffer codeBuffer) {
		
		codeBuffer.appendDottedLine()
			.appendComment("Generated by gendb " + new Date())
			.appendDottedLine()
			.appendNl();
		
	}
	
	public void codeHeader(CodeBuffer codeBuffer, DatabaseDto dbDto) {
		
		Release release = releaseService.getReleaseById(dbDto.getReleaseId()).orElseThrow(() -> new ResourceNotFoundException("Project", "id", dbDto.getReleaseId()));
		ProjectDto project = projectService.getProjectById(release.getProjectId());
		
		codeBuffer.appendDottedLine()
			.appendComment("Generated by gendb " + new Date())
			.appendComment("Project: " + project.getName())
			.appendComment("Release: " + release.getName())
			.appendComment("Version: " + release.getVersion())
			.appendComment("Since:   " + release.getSince())
			.appendComment("Database: " + dbDto.getDbname() )
			.appendComment("Collation / Charset: " + dbDto.getCollation().getCollation() + " / " + dbDto.getCollation().getCharacterset())
			.appendComment("Database Type: " + dbDto.getDbType().getTypename())
			.appendDottedLine()
			.appendNl();
		
	}

	public String getDbType() {
		return this.dbType;
	}

	/**
	 * @return the scope
	 */
	public Scope getScope() {
		return scope;
	}

	/**
	 * @param scope the scope to set
	 */
	public void setScope(Scope scope) {
		this.scope = scope;
	}

	/**
	 * @param dbType the dbType to set
	 */
	public void setDbType(String dbType) {
		this.dbType = dbType;
	}

}
